// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: seo_agent.proto

package seo_agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SEOAgentService_HealthCheck_FullMethodName = "/seo_agent.SEOAgentService/HealthCheck"
	SEOAgentService_AnalyzeSEO_FullMethodName  = "/seo_agent.SEOAgentService/AnalyzeSEO"
	SEOAgentService_Chat_FullMethodName        = "/seo_agent.SEOAgentService/Chat"
)

// SEOAgentServiceClient is the client API for SEOAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SEOAgentServiceClient interface {
	// Health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Analyze image for SEO purposes
	AnalyzeSEO(ctx context.Context, in *AnalyzeSEORequest, opts ...grpc.CallOption) (*AnalyzeSEOResponse, error)
	// General chat endpoint
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
}

type sEOAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSEOAgentServiceClient(cc grpc.ClientConnInterface) SEOAgentServiceClient {
	return &sEOAgentServiceClient{cc}
}

func (c *sEOAgentServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, SEOAgentService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEOAgentServiceClient) AnalyzeSEO(ctx context.Context, in *AnalyzeSEORequest, opts ...grpc.CallOption) (*AnalyzeSEOResponse, error) {
	out := new(AnalyzeSEOResponse)
	err := c.cc.Invoke(ctx, SEOAgentService_AnalyzeSEO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEOAgentServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, SEOAgentService_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SEOAgentServiceServer is the server API for SEOAgentService service.
// All implementations must embed UnimplementedSEOAgentServiceServer
// for forward compatibility
type SEOAgentServiceServer interface {
	// Health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Analyze image for SEO purposes
	AnalyzeSEO(context.Context, *AnalyzeSEORequest) (*AnalyzeSEOResponse, error)
	// General chat endpoint
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	mustEmbedUnimplementedSEOAgentServiceServer()
}

// UnimplementedSEOAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSEOAgentServiceServer struct {
}

func (UnimplementedSEOAgentServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSEOAgentServiceServer) AnalyzeSEO(context.Context, *AnalyzeSEORequest) (*AnalyzeSEOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeSEO not implemented")
}
func (UnimplementedSEOAgentServiceServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedSEOAgentServiceServer) mustEmbedUnimplementedSEOAgentServiceServer() {}

// UnsafeSEOAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SEOAgentServiceServer will
// result in compilation errors.
type UnsafeSEOAgentServiceServer interface {
	mustEmbedUnimplementedSEOAgentServiceServer()
}

func RegisterSEOAgentServiceServer(s grpc.ServiceRegistrar, srv SEOAgentServiceServer) {
	s.RegisterService(&SEOAgentService_ServiceDesc, srv)
}

func _SEOAgentService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEOAgentServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SEOAgentService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEOAgentServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEOAgentService_AnalyzeSEO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeSEORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEOAgentServiceServer).AnalyzeSEO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SEOAgentService_AnalyzeSEO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEOAgentServiceServer).AnalyzeSEO(ctx, req.(*AnalyzeSEORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEOAgentService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEOAgentServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SEOAgentService_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEOAgentServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SEOAgentService_ServiceDesc is the grpc.ServiceDesc for SEOAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SEOAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seo_agent.SEOAgentService",
	HandlerType: (*SEOAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _SEOAgentService_HealthCheck_Handler,
		},
		{
			MethodName: "AnalyzeSEO",
			Handler:    _SEOAgentService_AnalyzeSEO_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _SEOAgentService_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seo_agent.proto",
}
