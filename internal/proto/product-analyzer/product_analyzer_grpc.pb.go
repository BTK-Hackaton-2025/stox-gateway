// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: internal/proto/product-analyzer/product_analyzer.proto

package product_analyzer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductAnalyzer_GenerateFromImage_FullMethodName    = "/productanalyzer.ProductAnalyzer/GenerateFromImage"
	ProductAnalyzer_GenerateFromImageUrl_FullMethodName = "/productanalyzer.ProductAnalyzer/GenerateFromImageUrl"
	ProductAnalyzer_HealthCheck_FullMethodName          = "/productanalyzer.ProductAnalyzer/HealthCheck"
)

// ProductAnalyzerClient is the client API for ProductAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Product Image Analyzer service for SEO-optimized product content generation
type ProductAnalyzerClient interface {
	// Generate product title and description from image bytes
	GenerateFromImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	// Generate product title and description from image URL
	GenerateFromImageUrl(ctx context.Context, in *ImageUrlRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	// Health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type productAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAnalyzerClient(cc grpc.ClientConnInterface) ProductAnalyzerClient {
	return &productAnalyzerClient{cc}
}

func (c *productAnalyzerClient) GenerateFromImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, ProductAnalyzer_GenerateFromImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAnalyzerClient) GenerateFromImageUrl(ctx context.Context, in *ImageUrlRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, ProductAnalyzer_GenerateFromImageUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAnalyzerClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ProductAnalyzer_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAnalyzerServer is the server API for ProductAnalyzer service.
// All implementations must embed UnimplementedProductAnalyzerServer
// for forward compatibility.
//
// Product Image Analyzer service for SEO-optimized product content generation
type ProductAnalyzerServer interface {
	// Generate product title and description from image bytes
	GenerateFromImage(context.Context, *ImageRequest) (*ImageResponse, error)
	// Generate product title and description from image URL
	GenerateFromImageUrl(context.Context, *ImageUrlRequest) (*ImageResponse, error)
	// Health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedProductAnalyzerServer()
}

// UnimplementedProductAnalyzerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductAnalyzerServer struct{}

func (UnimplementedProductAnalyzerServer) GenerateFromImage(context.Context, *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFromImage not implemented")
}
func (UnimplementedProductAnalyzerServer) GenerateFromImageUrl(context.Context, *ImageUrlRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFromImageUrl not implemented")
}
func (UnimplementedProductAnalyzerServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedProductAnalyzerServer) mustEmbedUnimplementedProductAnalyzerServer() {}
func (UnimplementedProductAnalyzerServer) testEmbeddedByValue()                         {}

// UnsafeProductAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAnalyzerServer will
// result in compilation errors.
type UnsafeProductAnalyzerServer interface {
	mustEmbedUnimplementedProductAnalyzerServer()
}

func RegisterProductAnalyzerServer(s grpc.ServiceRegistrar, srv ProductAnalyzerServer) {
	// If the following call pancis, it indicates UnimplementedProductAnalyzerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductAnalyzer_ServiceDesc, srv)
}

func _ProductAnalyzer_GenerateFromImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAnalyzerServer).GenerateFromImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAnalyzer_GenerateFromImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAnalyzerServer).GenerateFromImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAnalyzer_GenerateFromImageUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAnalyzerServer).GenerateFromImageUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAnalyzer_GenerateFromImageUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAnalyzerServer).GenerateFromImageUrl(ctx, req.(*ImageUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAnalyzer_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAnalyzerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductAnalyzer_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAnalyzerServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAnalyzer_ServiceDesc is the grpc.ServiceDesc for ProductAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productanalyzer.ProductAnalyzer",
	HandlerType: (*ProductAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateFromImage",
			Handler:    _ProductAnalyzer_GenerateFromImage_Handler,
		},
		{
			MethodName: "GenerateFromImageUrl",
			Handler:    _ProductAnalyzer_GenerateFromImageUrl_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ProductAnalyzer_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/product-analyzer/product_analyzer.proto",
}
